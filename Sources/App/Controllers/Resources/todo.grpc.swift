//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: Resources/todo.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// The todos service definition.
///
/// Usage: instantiate `Todos_TodoServiceClient`, then call methods of this protocol to make API calls.
internal protocol Todos_TodoServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Todos_TodoServiceClientInterceptorFactoryProtocol? { get }

  func fetchTodos(
    _ request: Todos_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Todos_Empty, Todos_TodoList>

  func createTodo(
    _ request: Todos_Todo,
    callOptions: CallOptions?
  ) -> UnaryCall<Todos_Todo, Todos_Todo>

  func deleteTodo(
    _ request: Todos_TodoID,
    callOptions: CallOptions?
  ) -> UnaryCall<Todos_TodoID, Todos_Empty>
}

extension Todos_TodoServiceClientProtocol {
  internal var serviceName: String {
    return "todos.TodoService"
  }

  /// Return a list of todos.
  ///
  /// - Parameters:
  ///   - request: Request to send to FetchTodos.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fetchTodos(
    _ request: Todos_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Todos_Empty, Todos_TodoList> {
    return self.makeUnaryCall(
      path: Todos_TodoServiceClientMetadata.Methods.fetchTodos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchTodosInterceptors() ?? []
    )
  }

  /// Create a new todo
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateTodo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createTodo(
    _ request: Todos_Todo,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Todos_Todo, Todos_Todo> {
    return self.makeUnaryCall(
      path: Todos_TodoServiceClientMetadata.Methods.createTodo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTodoInterceptors() ?? []
    )
  }

  /// Delete a todo
  ///
  /// - Parameters:
  ///   - request: Request to send to DeleteTodo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func deleteTodo(
    _ request: Todos_TodoID,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Todos_TodoID, Todos_Empty> {
    return self.makeUnaryCall(
      path: Todos_TodoServiceClientMetadata.Methods.deleteTodo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTodoInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Todos_TodoServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Todos_TodoServiceNIOClient")
internal final class Todos_TodoServiceClient: Todos_TodoServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Todos_TodoServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Todos_TodoServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the todos.TodoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Todos_TodoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Todos_TodoServiceNIOClient: Todos_TodoServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Todos_TodoServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the todos.TodoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Todos_TodoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// The todos service definition.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Todos_TodoServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Todos_TodoServiceClientInterceptorFactoryProtocol? { get }

  func makeFetchTodosCall(
    _ request: Todos_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Todos_Empty, Todos_TodoList>

  func makeCreateTodoCall(
    _ request: Todos_Todo,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Todos_Todo, Todos_Todo>

  func makeDeleteTodoCall(
    _ request: Todos_TodoID,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Todos_TodoID, Todos_Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Todos_TodoServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Todos_TodoServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Todos_TodoServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeFetchTodosCall(
    _ request: Todos_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Todos_Empty, Todos_TodoList> {
    return self.makeAsyncUnaryCall(
      path: Todos_TodoServiceClientMetadata.Methods.fetchTodos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchTodosInterceptors() ?? []
    )
  }

  internal func makeCreateTodoCall(
    _ request: Todos_Todo,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Todos_Todo, Todos_Todo> {
    return self.makeAsyncUnaryCall(
      path: Todos_TodoServiceClientMetadata.Methods.createTodo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTodoInterceptors() ?? []
    )
  }

  internal func makeDeleteTodoCall(
    _ request: Todos_TodoID,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Todos_TodoID, Todos_Empty> {
    return self.makeAsyncUnaryCall(
      path: Todos_TodoServiceClientMetadata.Methods.deleteTodo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTodoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Todos_TodoServiceAsyncClientProtocol {
  internal func fetchTodos(
    _ request: Todos_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Todos_TodoList {
    return try await self.performAsyncUnaryCall(
      path: Todos_TodoServiceClientMetadata.Methods.fetchTodos.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchTodosInterceptors() ?? []
    )
  }

  internal func createTodo(
    _ request: Todos_Todo,
    callOptions: CallOptions? = nil
  ) async throws -> Todos_Todo {
    return try await self.performAsyncUnaryCall(
      path: Todos_TodoServiceClientMetadata.Methods.createTodo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateTodoInterceptors() ?? []
    )
  }

  internal func deleteTodo(
    _ request: Todos_TodoID,
    callOptions: CallOptions? = nil
  ) async throws -> Todos_Empty {
    return try await self.performAsyncUnaryCall(
      path: Todos_TodoServiceClientMetadata.Methods.deleteTodo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteTodoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Todos_TodoServiceAsyncClient: Todos_TodoServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Todos_TodoServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Todos_TodoServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Todos_TodoServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'fetchTodos'.
  func makeFetchTodosInterceptors() -> [ClientInterceptor<Todos_Empty, Todos_TodoList>]

  /// - Returns: Interceptors to use when invoking 'createTodo'.
  func makeCreateTodoInterceptors() -> [ClientInterceptor<Todos_Todo, Todos_Todo>]

  /// - Returns: Interceptors to use when invoking 'deleteTodo'.
  func makeDeleteTodoInterceptors() -> [ClientInterceptor<Todos_TodoID, Todos_Empty>]
}

internal enum Todos_TodoServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TodoService",
    fullName: "todos.TodoService",
    methods: [
      Todos_TodoServiceClientMetadata.Methods.fetchTodos,
      Todos_TodoServiceClientMetadata.Methods.createTodo,
      Todos_TodoServiceClientMetadata.Methods.deleteTodo,
    ]
  )

  internal enum Methods {
    internal static let fetchTodos = GRPCMethodDescriptor(
      name: "FetchTodos",
      path: "/todos.TodoService/FetchTodos",
      type: GRPCCallType.unary
    )

    internal static let createTodo = GRPCMethodDescriptor(
      name: "CreateTodo",
      path: "/todos.TodoService/CreateTodo",
      type: GRPCCallType.unary
    )

    internal static let deleteTodo = GRPCMethodDescriptor(
      name: "DeleteTodo",
      path: "/todos.TodoService/DeleteTodo",
      type: GRPCCallType.unary
    )
  }
}

/// The todos service definition.
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Todos_TodoServiceProvider: CallHandlerProvider {
  var interceptors: Todos_TodoServiceServerInterceptorFactoryProtocol? { get }

  /// Return a list of todos.
  func fetchTodos(request: Todos_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Todos_TodoList>

  /// Create a new todo
  func createTodo(request: Todos_Todo, context: StatusOnlyCallContext) -> EventLoopFuture<Todos_Todo>

  /// Delete a todo
  func deleteTodo(request: Todos_TodoID, context: StatusOnlyCallContext) -> EventLoopFuture<Todos_Empty>
}

extension Todos_TodoServiceProvider {
  internal var serviceName: Substring {
    return Todos_TodoServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "FetchTodos":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Todos_Empty>(),
        responseSerializer: ProtobufSerializer<Todos_TodoList>(),
        interceptors: self.interceptors?.makeFetchTodosInterceptors() ?? [],
        userFunction: self.fetchTodos(request:context:)
      )

    case "CreateTodo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Todos_Todo>(),
        responseSerializer: ProtobufSerializer<Todos_Todo>(),
        interceptors: self.interceptors?.makeCreateTodoInterceptors() ?? [],
        userFunction: self.createTodo(request:context:)
      )

    case "DeleteTodo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Todos_TodoID>(),
        responseSerializer: ProtobufSerializer<Todos_Empty>(),
        interceptors: self.interceptors?.makeDeleteTodoInterceptors() ?? [],
        userFunction: self.deleteTodo(request:context:)
      )

    default:
      return nil
    }
  }
}

/// The todos service definition.
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Todos_TodoServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Todos_TodoServiceServerInterceptorFactoryProtocol? { get }

  /// Return a list of todos.
  func fetchTodos(
    request: Todos_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Todos_TodoList

  /// Create a new todo
  func createTodo(
    request: Todos_Todo,
    context: GRPCAsyncServerCallContext
  ) async throws -> Todos_Todo

  /// Delete a todo
  func deleteTodo(
    request: Todos_TodoID,
    context: GRPCAsyncServerCallContext
  ) async throws -> Todos_Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Todos_TodoServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Todos_TodoServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Todos_TodoServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Todos_TodoServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "FetchTodos":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Todos_Empty>(),
        responseSerializer: ProtobufSerializer<Todos_TodoList>(),
        interceptors: self.interceptors?.makeFetchTodosInterceptors() ?? [],
        wrapping: { try await self.fetchTodos(request: $0, context: $1) }
      )

    case "CreateTodo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Todos_Todo>(),
        responseSerializer: ProtobufSerializer<Todos_Todo>(),
        interceptors: self.interceptors?.makeCreateTodoInterceptors() ?? [],
        wrapping: { try await self.createTodo(request: $0, context: $1) }
      )

    case "DeleteTodo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Todos_TodoID>(),
        responseSerializer: ProtobufSerializer<Todos_Empty>(),
        interceptors: self.interceptors?.makeDeleteTodoInterceptors() ?? [],
        wrapping: { try await self.deleteTodo(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Todos_TodoServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'fetchTodos'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFetchTodosInterceptors() -> [ServerInterceptor<Todos_Empty, Todos_TodoList>]

  /// - Returns: Interceptors to use when handling 'createTodo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateTodoInterceptors() -> [ServerInterceptor<Todos_Todo, Todos_Todo>]

  /// - Returns: Interceptors to use when handling 'deleteTodo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteTodoInterceptors() -> [ServerInterceptor<Todos_TodoID, Todos_Empty>]
}

internal enum Todos_TodoServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "TodoService",
    fullName: "todos.TodoService",
    methods: [
      Todos_TodoServiceServerMetadata.Methods.fetchTodos,
      Todos_TodoServiceServerMetadata.Methods.createTodo,
      Todos_TodoServiceServerMetadata.Methods.deleteTodo,
    ]
  )

  internal enum Methods {
    internal static let fetchTodos = GRPCMethodDescriptor(
      name: "FetchTodos",
      path: "/todos.TodoService/FetchTodos",
      type: GRPCCallType.unary
    )

    internal static let createTodo = GRPCMethodDescriptor(
      name: "CreateTodo",
      path: "/todos.TodoService/CreateTodo",
      type: GRPCCallType.unary
    )

    internal static let deleteTodo = GRPCMethodDescriptor(
      name: "DeleteTodo",
      path: "/todos.TodoService/DeleteTodo",
      type: GRPCCallType.unary
    )
  }
}
